/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gestion.venteguitare.main.vue.dialog;

import gestion.venteguitare.main.controlers.ClientDAO;
import gestion.venteguitare.main.model.Client;
import gestion.venteguitare.main.vue.panel.ClientPannel;
import java.awt.Color;
import java.awt.Dimension;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;
/**
 *
 * @author tiaray
 */
public class ClientDialog extends javax.swing.JDialog {

    private void enregistrementClient(String nom, String prenom, String email, String telephone) {
        try {
            // Mise à jour du client
            client.setNom(nom);
            client.setPrenom(prenom);
            client.setEmail(email.isEmpty() ? null : email);
            client.setTelephone(telephone);
            
            // Enregistrement DAO
            ClientDAO dao = new ClientDAO();
            if (mode == Mode.AJOUT) {
                dao.insert(client);
                JOptionPane.showMessageDialog(this,
                    "Client ajouté avec succès",
                    "Succès",
                    JOptionPane.INFORMATION_MESSAGE);
            } else {
                dao.update(client);
                JOptionPane.showMessageDialog(this,
                    "Modifications enregistrées",
                    "Succès",
                    JOptionPane.INFORMATION_MESSAGE);
            }
            
            if(parentPanel != null)
                parentPanel.refreshClients();
            dispose();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Erreur base de données: " + ex.getMessage(),
                "Erreur technique",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
    public enum Mode { AJOUT, MODIFICATION }
    
    private final Mode mode;
    private Client client;
    private final ClientPannel parentPanel;

    /**
     * Creates new form ClientDialog
     */
    public ClientDialog(JFrame parent, Mode mode, ClientPannel parentPanel, Client client) {
        super(parent, true);
        this.mode = mode;
        this.parentPanel = parentPanel;
        this.client = (mode == Mode.AJOUT) ? new Client() : client;
        
        initComponents();
        lblErreur.setVisible(false);
        lblErreur.setPreferredSize(new Dimension(300, 20));
        initMode();
        setupInputValidation();
        pack();
        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPrenom = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtTelephone = new javax.swing.JTextField();
        btnValider = new javax.swing.JButton();
        btnAnnuler = new javax.swing.JButton();
        lblErreur = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);

        jLabel1.setText("Nom :");

        jLabel2.setText("Prénom :");

        jLabel3.setText("Email :");

        jLabel4.setText("Téléphone :");

        btnValider.setText("Valider");
        btnValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValiderActionPerformed(evt);
            }
        });

        btnAnnuler.setText("Annuler");
        btnAnnuler.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnulerActionPerformed(evt);
            }
        });

        lblErreur.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnAnnuler)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnValider))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel1))
                                    .addGap(27, 27, 27)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtEmail)
                                            .addComponent(txtPrenom)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addComponent(lblErreur)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtPrenom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lblErreur)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnValider)
                    .addComponent(btnAnnuler))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValiderActionPerformed
        // TODO add your handling code here:
        try {
            // Validation finale avant enregistrement
            String nom = txtNom.getText().trim();
            String prenom = txtPrenom.getText().trim();
            String email = txtEmail.getText().trim();
            String telephone = txtTelephone.getText().replaceAll("[^0-9]", ""); // Supprimer tout ce qui n'est pas chiffre

            if (nom.isEmpty()) {
                throw new IllegalArgumentException("Le nom est obligatoire");
            }
            if (prenom.isEmpty()) {
                throw new IllegalArgumentException("Le prénom est obligatoire");
            }
            if (!email.isEmpty() && !email.matches("^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
                throw new IllegalArgumentException("Email invalide");
            }
            if (!telephone.matches("^(032|033|034|037|038)\\d{7}$")) {
                throw new IllegalArgumentException("Téléphone invalide - doit commencer par 032, 033, 034, 037 ou 038 et avoir 10 chiffres");
            }

            enregistrementClient(nom, prenom, email, telephone);

        } catch(IllegalArgumentException ex) {
            showError(ex.getMessage());
        }
    }//GEN-LAST:event_btnValiderActionPerformed

    private void btnAnnulerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnulerActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnAnnulerActionPerformed

    /**
     * @param args the command line arguments
     */
    
    
    private void initMode() {
        setTitle(mode == Mode.AJOUT ? "Ajouter un client" : "Modifier le client");
        
        if(mode == Mode.MODIFICATION){
            txtNom.setText(client.getNom());
            txtPrenom.setText(client.getPrenom());
            txtEmail.setText(client.getEmail());
            txtTelephone.setText(client.getTelephone());
        }
    }
    private void setupInputValidation() {
        // Filtre pour le nom (lettres, espaces, apostrophes, tirets)
        ((PlainDocument) txtNom.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String text, AttributeSet attr) 
                    throws BadLocationException {
                if (text.matches("[a-zA-Z\\s\\-\\']*")) {
                    super.insertString(fb, offset, text, attr);
                    lblErreur.setText("");
                } else {
                    showError("Le nom ne peut contenir que des lettres, espaces, apostrophes ou tirets");
                }
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) 
                    throws BadLocationException {
                if (text.matches("[a-zA-Z\\s\\-\\']*")) {
                    super.replace(fb, offset, length, text, attrs);
                    lblErreur.setText("");
                } else {
                    showError("Le nom ne peut contenir que des lettres, espaces, apostrophes ou tirets");
                }
            }
        });

        // Filtre pour le prénom (mêmes règles que le nom)
        ((PlainDocument) txtPrenom.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String text, AttributeSet attr) 
                    throws BadLocationException {
                if (text.matches("[a-zA-Z\\s\\-\\']*")) {
                    super.insertString(fb, offset, text, attr);
                    lblErreur.setText("");
                } else {
                    showError("Le prénom ne peut contenir que des lettres, espaces, apostrophes ou tirets");
                }
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) 
                    throws BadLocationException {
                if (text.matches("[a-zA-Z\\s\\-\\']*")) {
                    super.replace(fb, offset, length, text, attrs);
                    lblErreur.setText("");
                } else {
                    showError("Le prénom ne peut contenir que des lettres, espaces, apostrophes ou tirets");
                }
            }
        });

        // Filtre pour l'email
        ((PlainDocument) txtEmail.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String text, AttributeSet attr) 
                    throws BadLocationException {
                String newText = fb.getDocument().getText(0, fb.getDocument().getLength()) + text;
                if (newText.isEmpty() || newText.matches("^[\\w-.]*@?[\\w-.]*$")) {
                    super.insertString(fb, offset, text, attr);
                    lblErreur.setText("");
                } else {
                    showError("Format d'email invalide");
                }
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) 
                    throws BadLocationException {
                String current = fb.getDocument().getText(0, fb.getDocument().getLength());
                String newText = current.substring(0, offset) + text + current.substring(offset + length);
                if (newText.isEmpty() || newText.matches("^[\\w-.]*@?[\\w-.]*$")) {
                    super.replace(fb, offset, length, text, attrs);
                    lblErreur.setText("");
                } else {
                    showError("Format d'email invalide");
                }
            }
        });

        // Filtre pour le téléphone (032/033/034/037/038 + 7 chiffres)
        ((PlainDocument) txtTelephone.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String text, AttributeSet attr) 
                    throws BadLocationException {
                // N'autoriser que les chiffres
                String digitsOnly = text.replaceAll("[^0-9]", "");
                if (!text.equals(digitsOnly)) {
                    showError("Seuls les chiffres sont autorisés");
                    return;
                }

                String current = fb.getDocument().getText(0, fb.getDocument().getLength());
                String newText = current.substring(0, offset) + digitsOnly + current.substring(offset);
                String newDigitsOnly = newText.replaceAll("[^0-9]", "");

                // Validation de la longueur et du format
                if (newDigitsOnly.length() > 10) {
                    showError("Le téléphone ne peut pas dépasser 10 chiffres");
                    return;
                }

                // Validation du préfixe seulement si on a au moins 3 chiffres
                if (newDigitsOnly.length() >= 3 && !newDigitsOnly.matches("^(032|033|034|037|038).*")) {
                    showError("Le téléphone doit commencer par 032, 033, 034, 037 ou 038");
                    return;
                }

                super.insertString(fb, offset, digitsOnly, attr);
                lblErreur.setText("");
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) 
                    throws BadLocationException {
                // N'autoriser que les chiffres
                String digitsOnly = text.replaceAll("[^0-9]", "");
                if (!text.equals(digitsOnly)) {
                    showError("Seuls les chiffres sont autorisés");
                    return;
                }

                String current = fb.getDocument().getText(0, fb.getDocument().getLength());
                String newText = current.substring(0, offset) + digitsOnly + current.substring(offset + length);
                String newDigitsOnly = newText.replaceAll("[^0-9]", "");

                // Validation de la longueur
                if (newDigitsOnly.length() > 10) {
                    showError("Le téléphone ne peut pas dépasser 10 chiffres");
                    return;
                }

                // Validation du préfixe seulement si on a au moins 3 chiffres
                if (newDigitsOnly.length() >= 3 && !newDigitsOnly.matches("^(032|033|034|037|038).*")) {
                    showError("Le téléphone doit commencer par 032, 033, 034, 037 ou 038");
                    return;
                }

                super.replace(fb, offset, length, digitsOnly, attrs);
                lblErreur.setText("");
            }
        });
    }
    private void showError(String message) {
        lblErreur.setText(message);
        lblErreur.setForeground(Color.RED);
        lblErreur.setVisible(true);
        pack();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnnuler;
    private javax.swing.JButton btnValider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblErreur;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNom;
    private javax.swing.JTextField txtPrenom;
    private javax.swing.JTextField txtTelephone;
    // End of variables declaration//GEN-END:variables
}
