/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gestion.venteguitare.main.vue.panel;

import gestion.venteguitare.main.controlers.ClientDAO;
import gestion.venteguitare.main.model.Client;
import gestion.venteguitare.main.model.ClientTableModel;
import gestion.venteguitare.main.vue.dialog.ClientDialog;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author tiaray
 */
public class ClientPannel extends javax.swing.JPanel {

    /**
     * Creates new form ClientPannel
     */
    public ClientPannel() {
        initComponents();
        initTable();
        loadClients();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAjouter = new javax.swing.JButton();
        btnModifier = new javax.swing.JButton();
        btnSupprimer = new javax.swing.JButton();
        btnRechercher = new javax.swing.JButton();
        txtRecherche = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableClients = new javax.swing.JTable();

        btnAjouter.setText("+ Ajouter");
        btnAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAjouterActionPerformed(evt);
            }
        });

        btnModifier.setText("üñä Modifier");
        btnModifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifierActionPerformed(evt);
            }
        });

        btnSupprimer.setText("üóë Supprimer");
        btnSupprimer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSupprimerActionPerformed(evt);
            }
        });

        btnRechercher.setText("üîç");
        btnRechercher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRechercherActionPerformed(evt);
            }
        });

        txtRecherche.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRechercheActionPerformed(evt);
            }
        });

        tableClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableClients);

        jScrollPane2.setViewportView(jScrollPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtRecherche)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRechercher)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAjouter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnModifier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSupprimer)
                .addContainerGap())
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnModifier)
                    .addComponent(btnSupprimer)
                    .addComponent(btnAjouter)
                    .addComponent(btnRechercher)
                    .addComponent(txtRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAjouterActionPerformed
        // TODO add your handling code here:
        new ClientDialog(
            (JFrame)SwingUtilities.getWindowAncestor(this),
            ClientDialog.Mode.AJOUT,
            this,
            null
        ).setVisible(true);
    }//GEN-LAST:event_btnAjouterActionPerformed

    private void btnModifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifierActionPerformed
        // TODO add your handling code here:
        int row = tableClients.getSelectedRow();
        if (row >= 0) {
            Client client = ((ClientTableModel)tableClients.getModel()).getClientAt(row);
            new ClientDialog(
                (JFrame)SwingUtilities.getWindowAncestor(this),
                ClientDialog.Mode.MODIFICATION,
                this,
                client
            ).setVisible(true);
        }else {
            JOptionPane.showMessageDialog(this,
                "Veuillez s√©lectionner un client",
                "Aucune s√©lection",
                JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnModifierActionPerformed

    private void btnSupprimerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSupprimerActionPerformed
        // TODO add your handling code here:
        supprimerClient();
    }//GEN-LAST:event_btnSupprimerActionPerformed

    private void btnRechercherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRechercherActionPerformed
        try {
            // TODO add your handling code here:
            filtrerClients();
        } catch (Exception ex) {
            Logger.getLogger(ClientPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnRechercherActionPerformed

    private void txtRechercheActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRechercheActionPerformed
        try {
            // TODO add your handling code here:
            filtrerClients();
        } catch (Exception ex) {
            Logger.getLogger(ClientPannel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtRechercheActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAjouter;
    private javax.swing.JButton btnModifier;
    private javax.swing.JButton btnRechercher;
    private javax.swing.JButton btnSupprimer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableClients;
    private javax.swing.JTextField txtRecherche;
    // End of variables declaration//GEN-END:variables

    private void initTable() {
        ClientTableModel model = new ClientTableModel();
        tableClients.setModel(model);
        
        tableClients.setAutoCreateRowSorter(true);
        
        tableClients.getColumnModel().getColumn(0).setPreferredWidth(5);
        tableClients.getColumnModel().getColumn(5).setPreferredWidth(10);
    }

    private void loadClients() {
        try {
            ClientDAO dao = new ClientDAO();
            ((ClientTableModel)tableClients.getModel()).setClients(dao.getAll());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erreur de chargement: " + ex.getMessage());
        }
    }

    public void refreshClients() throws Exception {
        try{
            ClientDAO dao = new ClientDAO();
            
            List<Client> clients = dao.getAll();
            
            ClientTableModel model = (ClientTableModel) tableClients.getModel();
            model.setClients(clients);
            
            if(tableClients.getRowSorter() != null){
                tableClients.getRowSorter().setSortKeys(null);
            } 
        }catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Erreur lors du rafra√Æchissement: " + ex.getMessage(),
                "Erreur",
                JOptionPane.ERROR_MESSAGE);
        }
    }
    private void supprimerClient() {
    int selectedRow = tableClients.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this,
            "Veuillez s√©lectionner un client",
            "Aucune s√©lection",
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    int confirm = JOptionPane.showConfirmDialog(this,
        "Voulez-vous vraiment supprimer ce client ?",
        "Confirmation",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                int modelRow = tableClients.convertRowIndexToModel(selectedRow);
                Client client = ((ClientTableModel)tableClients.getModel()).getClientAt(modelRow);

                try{
                    ClientDAO dao = new ClientDAO();
                    dao.delete(client.getId());
                    refreshClients();
                    JOptionPane.showMessageDialog(this,
                        "Client supprim√© avec succ√®s",
                        "Succ√®s",
                        JOptionPane.INFORMATION_MESSAGE);
                }
                catch (Exception ex) {
                    JOptionPane.showMessageDialog(this,
                        "Erreur lors de la suppression: " + ex.getMessage(),
                        "Erreur",
                        JOptionPane.ERROR_MESSAGE);
                }
                }catch (Exception ex) {
                    JOptionPane.showMessageDialog(this,
                        "Erreur lors de la suppression: " + ex.getMessage(),
                        "Erreur",
                        JOptionPane.ERROR_MESSAGE);
                }
        }
    }
    
    private void filtrerClients() throws Exception {
        String recherche = txtRecherche.getText().trim();

        if (recherche.isEmpty() || recherche.equalsIgnoreCase("tout")) {
            refreshClients();
            return;
        }

        try {
            ClientDAO dao = new ClientDAO();
            List<Client> clientsFiltres = dao.search(recherche);
            ((ClientTableModel)tableClients.getModel()).setClients(clientsFiltres);

            if (clientsFiltres.isEmpty()) {
                JOptionPane.showMessageDialog(this,
                    "Aucun client trouv√©",
                    "Information",
                    JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Erreur lors de la recherche: " + ex.getMessage(),
                "Erreur",
                JOptionPane.ERROR_MESSAGE);
        }
    }
}
