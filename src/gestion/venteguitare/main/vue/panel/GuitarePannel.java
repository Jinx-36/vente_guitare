/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gestion.venteguitare.main.vue.panel;

import com.mysql.jdbc.PreparedStatement;
import gestion.venteguitare.main.controlers.GuitareDAO;
import gestion.venteguitare.main.model.Guitare;
import gestion.venteguitare.main.model.Utilisateur;
import gestion.venteguitare.main.vue.dialog.GuitareDialog;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.PopupMenu;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.sql.ResultSet;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

/**
 *
 * @author tiaray
 */
public class GuitarePannel extends javax.swing.JPanel {
    private final Utilisateur currentUser;
    /**
     * Creates new form GuitarePannel
     */
    
    private void openAddDialog() {
        GuitareDialog dialog = new GuitareDialog(
            (JFrame)SwingUtilities.getWindowAncestor(this),
            GuitareDialog.Mode.AJOUT,
            this,
            null
        );
        dialog.setVisible(true);
    }

    private void openEditDialog(Guitare g) {
        GuitareDialog dialog = new GuitareDialog(
            (JFrame)SwingUtilities.getWindowAncestor(this),
            GuitareDialog.Mode.MODIFICATION,
            this,
            g
        );
        dialog.setVisible(true);
    }
    
    public GuitarePannel(Utilisateur user) {
        this.currentUser = user;
        initComponents();
        initRecherche();
        refreshGuitares();
        if(currentUser.isVendeur()){
            btnAdd.setEnabled(false);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        cardsPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnRechercher = new javax.swing.JButton();
        txtRecherche = new javax.swing.JTextField();

        setBorder(null);
        setLayout(new java.awt.BorderLayout());

        cardsPanel.setLayout(new javax.swing.BoxLayout(cardsPanel, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane2.setViewportView(cardsPanel);

        add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 50));
        jPanel1.setMinimumSize(new java.awt.Dimension(100, 50));
        jPanel1.setPreferredSize(new java.awt.Dimension(400, 50));

        btnAdd.setText("+ Ajouter");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRechercher.setText("üîçRechercher");

        txtRecherche.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtRechercheInputMethodTextChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(txtRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRechercher)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdd)
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnRechercher)
                    .addComponent(txtRecherche, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        openAddDialog();
    }//GEN-LAST:event_btnAddActionPerformed

    private void txtRechercheInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtRechercheInputMethodTextChanged
        // TODO add your handling code here:
        filtrerGuitares();
    }//GEN-LAST:event_txtRechercheInputMethodTextChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnRechercher;
    private javax.swing.JPanel cardsPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtRecherche;
    // End of variables declaration//GEN-END:variables

    public void refreshGuitares() {
        try {
            // netoyer le panel existant
            cardsPanel.removeAll();
            cardsPanel.setLayout(new BoxLayout(cardsPanel, BoxLayout.Y_AXIS));
            
            // R√©cup√©rer les guitares dans la BD
            GuitareDAO dao = new GuitareDAO();
            List<Guitare> guitares = dao.getAll();
            dao.close();
            
            afficherGuitares(guitares);  
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, 
            "Erreur de chargement: " + ex.getMessage(),
            "Erreur",
            JOptionPane.ERROR_MESSAGE);
        }
    }

    private void confirmDelete(Guitare g) {
        int confirm = JOptionPane.showConfirmDialog(
        this, 
        "Supprimer " + g.getMarque() + " " + g.getModele() + " ?",
        "Confirmation",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE
        );

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                GuitareDAO dao = new GuitareDAO();
                dao.delete(g.getId());
                refreshGuitares();
            } catch (Exception ex) {
                System.out.println(ex);
            }
        }
    }

    private void initRecherche() {
        txtRecherche.setText("Tout");
        txtRecherche.setForeground(Color.GRAY);
        
        // Gestion du focus pou le placeHolder
        txtRecherche.addFocusListener(new FocusAdapter() {
        @Override
        public void focusGained(FocusEvent e) {
            if (txtRecherche.getText().equals("Tout")) {
                txtRecherche.setText("");
                txtRecherche.setForeground(Color.BLACK);
            }
        }
        
        @Override
        public void focusLost(FocusEvent e) {
            if (txtRecherche.getText().isEmpty()) {
                txtRecherche.setText("Tout");
                txtRecherche.setForeground(Color.GRAY);
            }
        }
        });

        // Recherche lors du clic ou appui sur Entr√©e
        btnRechercher.addActionListener(e -> filtrerGuitares());
        txtRecherche.addActionListener(e -> filtrerGuitares());
    }

    private void filtrerGuitares() {
        String recherche = txtRecherche.getText().trim().toLowerCase();
    
        try{
            GuitareDAO dao = new GuitareDAO();
            List<Guitare> toutesGuitares = dao.getAll();
            List<Guitare> guitaresFiltrees;

            if (recherche.isEmpty() || recherche.equals("tout")) {
                guitaresFiltrees = toutesGuitares;
            } else {
                guitaresFiltrees = toutesGuitares.stream()
                    .filter(g -> 
                        g.getMarque().toLowerCase().contains(recherche) ||
                        g.getModele().toLowerCase().contains(recherche) ||
                        g.getCategorie().toLowerCase().contains(recherche))
                    .collect(Collectors.toList());
            }

            afficherGuitares(guitaresFiltrees);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Erreur lors du filtrage : " + ex.getMessage(),
                "Erreur",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    private void afficherGuitares(List<Guitare> guitares) {
        cardsPanel.removeAll();
    
    if (guitares.isEmpty()) {
        JLabel lblAucunResultat = new JLabel("Aucune guitare trouv√©e");
        lblAucunResultat.setHorizontalAlignment(SwingConstants.CENTER);
        cardsPanel.add(lblAucunResultat);
    } else {
        for (Guitare g : guitares) {
            // Panel principal
                JPanel card = new JPanel();
                card.setLayout(new BorderLayout(10,10));
                card.setBorder(BorderFactory.createCompoundBorder(
                    BorderFactory.createEmptyBorder(5, 5, 5, 5),
                    BorderFactory.createEtchedBorder()
                ));
                
                // Partie Image
                JLabel lblImage = new JLabel();
                lblImage.setHorizontalAlignment(SwingConstants.CENTER);
                lblImage.setPreferredSize(new Dimension(200, 200));
                try {
                    ImageIcon icon = new ImageIcon(getClass().getResource("/Images/" + g.getImagePath()));
                    lblImage.setIcon(new ImageIcon(icon.getImage().getScaledInstance(200, 200, Image.SCALE_AREA_AVERAGING)));
                } catch (Exception e) {
                    lblImage.setIcon(new ImageIcon(getClass().getResource("/Images/placeHolder.png")));
                }
                card.add(lblImage, BorderLayout.WEST);
                
                // Partie Infos (cr√©√©e en mode Design)
                JPanel infoPanel = new JPanel();
                infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));

                // Composants ajout√©s dynamiquement
                JLabel lblTitre = new JLabel(g.getMarque() + " " + g.getModele());
                lblTitre.setFont(new Font("Segoe UI", Font.BOLD, 21));
                infoPanel.add(lblTitre);

                infoPanel.add(new JLabel("Prix: " + g.getPrix()));
                infoPanel.add(new JLabel("Stock: " + g.getQuantiteStock()));

                if (g.getQuantiteStock() < 3) {
                    JLabel lblAlerte = new JLabel("STOCK FAIBLE!");
                    lblAlerte.setForeground(Color.RED);
                    infoPanel.add(lblAlerte);
                }
            
                card.add(infoPanel, BorderLayout.CENTER);

                // Boutons (cr√©√©s en mode Design)
                JPanel btnPanel = new JPanel(new GridLayout(2, 1, 2, 2));

                JButton btnEdit = new JButton("Modifier");
                btnEdit.addActionListener(e -> openEditDialog(g));

                JButton btnDelete = new JButton("Supprimer");
                btnDelete.addActionListener(e -> confirmDelete(g));

                btnPanel.add(btnEdit);
                btnPanel.add(btnDelete);
                card.add(btnPanel, BorderLayout.EAST);
                if(currentUser.isVendeur()){
                    btnEdit.setEnabled(false);
                    btnDelete.setEnabled(false);
                }
                cardsPanel.add(card);
        }
    }
    
    cardsPanel.revalidate();
    cardsPanel.repaint();
    }
}
